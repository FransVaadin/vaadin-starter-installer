#!/usr/bin/env bash
# This script installs any specified starter project automatically

source ./lib/lib-utils.sh

PROJECT="$1"
VERSION="$2"
TIMEOUT="$3"
SPRING_STRING="No issues found."
CDI_STRING="Content removed from location "
CDI_STRING2="Content removed from location "
GRADLE_STRING="No issues found."
QUARKUS_STRING="No issues found."
QUARKUS2_STRING="Atmosphere Framework "
SYSTEM=""
PORT=8080
FAIL_COUNT=0


usage(){
		echo -e "Usage: ./vaadin-stater-installer <project> <version> <timeout>\n"
		exit 1
}

# checks and deletes old directory
check_directory(){
		[[ -d "$1" ]] && rm -rf "$1"
}

# kill the server
kill_server(){
		port="$1"
		if [[ "$SYSTEM" == "mac" ]]; then
				doKill $(lsof -t -i:$port) 2>/dev/null
		elif [[ "$SYSTEM" == "linux" ]]; then
				doKill $(fuser $port/tcp)
		else
				doKill $(ps | grep 'java' | awk '{print $1}')
		fi
}

# check the answer of "Do you wish to visually inspect it?"
check_success(){ 
		messageFound="$1"
		httpCode="$2"
		if [[ $messageFound -eq 0 && $httpCode -eq 0 ]]; then
				#ask "The server exited successfully. Press enter when ready."
				waitForUserWithBell "The server executed successfully. Inspect the server visually." 
				kill_server $PORT
		else	
				log "The server failed"
				FAIL_COUNT=$((FAIL_COUNT + 1))
				return 1
		fi
}


fail(){

		cmd=$1
		output=$2

		log "$cmd failed! Output dumped to $output"

}	

increment_fail(){

		FAIL_COUNT=$((FAIL_COUNT + 1))

}	

check_fail(){

		if [[ $FAIL_COUNT -gt 0 ]]; then
				log "base_starter_flow_osgi failed $FAIL_COUNT time(s). Check osgi.output for errors."
		fi	

}


git_clone(){
		git clone --quiet https://github.com/vaadin/$1.git
		cd "$1"
}

# Check what OS the user is using and store it in SYSTEM
check_os(){

	case $OSTYPE in
			darwin*) SYSTEM="mac";;
			Linux*) SYSTEM="linux";;
			*) SYSTEM="windows";;
	esac

}

mvn_clean_install(){

		mvn clean install >>../osgi.output 2>&1 || increment_fail

}

base_starter_flow_osgi(){

		log "Running $FUNCNAME"

		mvn_clean_install

		mvn version:set-property -Dproperty=vaadin.version -DnewVersion=$VERSION >>../osgi.output 2>&1 || increment_fail

		mvn_clean_install

		log "$FUNCNAME: exited with $FAIL_COUNT error(s). Check the logs for more details."

		FAIL_COUNT=0
}

mvn_verify(){

		mvn verify -Pit,production >>../cdi.output 2>&1 || increment_fail

}

skeleton_starter_flow_cdi(){

		log "Running $FUNCNAME"

		mvn_verify

		checkBusyPort $PORT ||  exit 1
		runInBackgroundToFile "mvn wildfly:run" "cdi.output" 
		# TODO :  What to do here? We either check the exit status and increment FAIL_COUNT or something else
		# We can't check the exit status because killing the server might result in an error, besides
		# we are already checking that it works with waitUntilMessageInFile and checkHttpServlet

		waitUntilMessageInFile "cdi.output" "$CDI_STRING" "$TIMEOUT" || kill_server $PORT
		messageFound=$?
		checkHttpServlet "http://localhost:8080"
		httpCode=$?
		check_success "$messageFound" "$httpCode"

		mvn versions:set-property -Dproperty=vaadin.version -DnewVersion=$VERSION >>../cdi.output 2>&1 || increment_fail
		echo -e "\n\n\nSTARTING HERE\n\n\n"
		mvn clean wildfly:run
		exit 0
		checkBusyPort $PORT || exit 1
		runInBackgroundToFile "mvn clean wildfly:run" "cdi.output"
		# TODO : The STRING appears twice in the output!
		waitUntilMessageInFile "cdi.output" "$CDI_STRING2" "$TIMEOUT" || kill_server $PORT
		messageFound=$?
		checkHttpServlet "http://localhost:8080"
		httpCode=$?
		check_success "$messageFound" "$httpCode"

		mvn_verify

		log "$FUNCNAME: exited with $FAIL_COUNT error(s). Check the logs for more details."
			
		CDI_RESULT=$FAIL_COUNT
		FAIL_COUNT=0
}

gradlew_boot(){

		./gradlew clean bootRun

}

base_starter_spring_gradle(){

		log "Running $FUNCNAME"

		checkBusyPort $PORT || exit 1
		runInBackgroundToFile "gradlew_boot" "gradle.output"
		waitUntilMessageInFile "gradle.output" "$GRADLE_STRING" "$TIMEOUT" || kill_server $PORT
		messageFound=$?
		checkHttpServlet "http://localhost:8080"
		httpCode=$?
		check_success "$messageFound" "$httpCode"

		perl -pi -e "s/vaadinVersion=.*/vaadinVersion=$VERSION/" gradle.properties


	# Edit the string and replacement string if they change in the future
	buildGradleString='mavenCentral\(\)'
	buildGradleReplace="mavenCentral\(\)\n\tmaven { setUrl('https:\/\/maven.vaadin.com\/vaadin-prereleases') }"

	perl -pi -e "s/$buildGradleString/$buildGradleReplace/" build.gradle


	# Edit the string and replacement string if they change in the future
	settingGradleString='pluginManagement {'
	settingGradleReplace="pluginManagement {\n  repositories {\n\tmaven { url = 'https:\/\/maven.vaadin.com\/vaadin-prereleases' }\n\tgradlePluginPortal()\n}"

	perl -pi -e "s/$settingGradleString/$settingGradleReplace/" settings.gradle

	checkBusyPort $PORT || exit 1
	runInBackgroundToFile "gradlew_boot" "gradle.output"
	waitUntilMessageInFile "gradle.output" "$GRADLE_STRING" "$TIMEOUT" || kill_server $PORT
	messageFound=$?
	checkHttpServlet "http://localhost:8080"
	httpCode=$?
	check_success "$messageFound" "$httpCode"



}

mvn_install(){

		mvn install

}


remove_node-modules(){

	rm -rf ./main-ui/nodeModules

}

vaadin_flow_karaf_example(){

		log "Running $FUNCNAME"

		mvn_install

		mvn -pl main-ui install -Prun

		mvn versions:set-property -Dproperty=vaadin.version -DnewVersion=$VERSION

		mvn_install

		remove-node-modules && mvn install

		mvn -pl main-ui install -Prun

}


mvnw_package_production(){

		./mvnw package -Pproduction  >>../quarkus.output 2>&1 || increment_fail

}


base_starter_flow_quarkus(){

		log "Running $FUNCNAME"

		checkBusyPort $PORT || exit 1
		runInBackgroundToFile "./mvnw" "quarkus.output"
		waitUntilMessageInFile "quarkus.output" "$QUARKUS_STRING" "$TIMEOUT" || kill_server $PORT
		messageFound=$?
		checkHttpServlet "http://localhost:8080"
		httpCode=$?
		check_success "$messageFound" "$httpCode"

		mvnw_package_production

		mvn versions:set-property -Dproperty=vaadin.version -DnewVersion=$VERSION >>../quarkus.output 2>&1 || increment_fail


		checkBusyPort $PORT || exit 1
		runInBackgroundToFile "./mvnw" "quarkus.output"
		waitUntilMessageInFile "quarkus.output" "$QUARKUS2_STRING" "$TIMEOUT" || kill_server $PORT
		messageFound=$?
		checkHttpServlet "http://localhost:8080"
		httpCode=$?
		check_success "$messageFound" "$httpCode"

		mvnw_package_production

		log "$FUNCNAME: exited with $FAIL_COUNT error(s). Check the logs for more details."

		FAIL_COUNT=0
}

mvn_package_production(){

		mvn package -Pproduction >>../spring.output 2>&1 || increment_fail

}

mvn_package_it(){

		mvn package -Pit >>../spring.output 2>&1 || increment_fail

}

skeleton_starter_flow_spring(){

	# Disable automatic browser startup in development mode
	# Doesn't work on Linux and Windows
	#turn_off_spring_browser


	log "Running $FUNCNAME"

	#change_spring_port
	checkBusyPort $PORT || exit 1
	runInBackgroundToFile mvn "spring.output"
	waitUntilMessageInFile "spring.output" "$SPRING_STRING" "$TIMEOUT" || kill_server $PORT
	messageFound=$?
	checkHttpServlet "http://localhost:8080"
	httpCode=$?
	check_success "$messageFound" "$httpCode"

	mvn_package_production

	mvn_package_it

	mvn versions:set-property -Dproperty=vaadin.version -DnewVersion=$VERSION >>../quarkus.output 2>&1 || increment_fail

	checkBusyPort $PORT || exit 1
	runInBackgroundToFile mvn "spring.output"
	waitUntilMessageInFile "spring.output" "$SPRING_STRING" "$TIMEOUT" || kill_server $PORT
	messageFound=$?
	checkHttpServlet "http://localhost:8080"
	httpCode=$?
	check_success "$messageFound" "$httpCode"

	rm -rf node_modules

	checkBusyPort $PORT || exit 1
	runInBackgroundToFile mvn "spring.output"
	waitUntilMessageInFile "spring.output" "$SPRING_STRING" "$TIMEOUT" || kill_server $PORT
	messageFound=$?
	checkHttpServlet "http://localhost:8080"
	httpCode=$?
	check_success "$messageFound" "$httpCode"

	mvn_package_production

	mvn_package_it

	log "$FUNCNAME: exited with $FAIL_COUNT error(s). Check the logs for more details."

	FAIL_COUNT=0
}

all(){

  check_directory base-starter-flow-osgi
  git_clone base-starter-flow-osgi
  base_starter_flow_osgi
	cd ..

  check_directory skeleton-starter-flow-spring
  git_clone skeleton-starter-flow-spring
  skeleton_starter_flow_spring
	cd ..

  check_directory base-starter-spring-gradle
  git_clone base-starter-spring-gradle
  base_starter_spring_gradle
	cd ..

  check_directory base-starter-flow-quarkus
  git_clone base-starter-flow-quarkus
  base_starter_flow_quarkus
	cd ..

  check_directory skeleton-starter-flow-cdi
  git_clone skeleton-starter-flow-cdi
  skeleton_starter_flow_cdi
	cd ..

  check_directory vaadin-flow-karaf-example
  git_clone vaadin-flow-karaf-example
  vaadin_flow_karaf_example

	exit 0
}

[[ "$#" -ne 3 ]] && usage

[[ "$1" == "all" ]] && all

func_name=${1//-/_}

check_os
check_directory "$PROJECT"
git_clone "$PROJECT"

"$func_name"
